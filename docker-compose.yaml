services:
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.0.5-management
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
    ports:
      - "5672:5672"
      - "15672:15672"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_PASSWOR: password
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    secrets:
      - source: postgres_password
    volumes:
      - karyotypic_analysis_pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    tty: true
    stdin_open: true

  ml:
    image: noihat/karyotyp-ml:1
    command: ["uvicorn", "ml_service.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    ports:
      - "8000:8000"
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        max_failure_ratio: 0.1
        order: start-first
      restart_policy:
        condition: on-failure

  celery:
    image: noihat/karyotyp-ml:1
    command: ["celery", "-A", "ml_service.celery_app", "worker", "--loglevel=info"]
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        max_failure_ratio: 0.1
        order: start-first
      restart_policy:
        condition: on-failure

  user:
    image: noihat/karyotyp-user:2
    ports:
      - "8001:8001"
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        max_failure_ratio: 0.1
        order: start-first
      restart_policy:
        condition: on-failure

  frontend:
    image: noihat/karyotyp-front:1
    ports:
      - "80:80"
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        max_failure_ratio: 0.1
        order: start-first
      restart_policy:
        condition: on-failure
  
#  frontend_in_development:
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#      target: development
#    ports:
#      - "3000:3000"
#    volumes:
#      - ./frontend:/app
#      - ./frontend/node_modules:/app/node_modules
#    depends_on:
#      - redis
#      - rabbitmq
#      - postgres
#     - user
#      - ml
  
volumes:
  karyotypic_analysis_pgdata:
    external: true 

secrets:
  postgres_password:
    name: postgres_password
    external: true